# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UBeFaOifd70jEfaG1rUWoH8hKJQwfrmc

# *<b>Урок 3. Изменение таблиц в Pandas

# **Условие 1: Задача 1** 

Скачать данные по ссылке https://www.kaggle.com/datasets/ionaskel/laptop-prices
# Считать данные с помощью pandas  
# Вывести на экран первые 5 строк  
1.2 Создать новый признак delta_renovated, который будет содержать разницу в годах между годом реновацией дома и годом постройки дома
Если реновации дома не было, то в новом признаке поставьте 0  
1.3 Создайте признаки года продажи, месяца продажи  
1.4 Удалите признаки date, zipcode, lat, long

### <b> 1.2 Создать новый признак delta_renovated, который будет содержать разницу в годах между годом реновацией дома и годом постройки дома. Если реновации дома не было, то в новом признаке поставьте 0

---

⏰
"""

import pandas as pd
imot = pd.read_csv('/content/sample_data/kc-house-data (1).csv', encoding='cp1251', index_col='id')
imot.head()

"""Создаю новый признак который содержит разницу между реновацией и годом постройки, где естественно получаются отрицательные числа, т.к. не везде была реновация"""

import pandas as pd
imot = pd.read_csv('/content/sample_data/kc-house-data (1).csv', encoding='cp1251', index_col='id')
imot['delta_renovated'] = imot['yr_renovated'] - imot['yr_built']
imot.head()

"""По сути меняю отрицательные числа на нули."""

def correct_num(x):
    if x < 0:
        return  0
    else:
          return  x
                  
imot['delta_renovated'] = imot['delta_renovated'].apply(lambda x: correct_num(x))

imot.head()

"""Меняю столбци местами, чтобы было наглядно"""

imot=imot[['date',	'price', 'delta_renovated', 'yr_built', 'yr_renovated', 'condition', 'sqft_lot', 'sqft_living',
      'floors', 'bedrooms', 'bathrooms',
    'waterfront', 'view',	'grade', 'sqft_above', 'sqft_basement',
    'zipcode', 'lat',	'long', 'sqft_living15', 'sqft_lot15']]
imot.sample(10)

"""###<b>1.3 Создайте признаки года продажи, месяца продажи"""

import pandas as pd
imot = pd.read_csv('/content/sample_data/kc-house-data (1).csv', encoding='cp1251', index_col='id')
imot['year_sale'] = ''
imot['month_sale'] = ''
imot.head()

imot=imot[['date',	'price','year_sale', 'month_sale', 'yr_built', 'condition','sqft_lot', 'sqft_living',
     'yr_renovated', 'floors', 'bedrooms', 'bathrooms',
    'waterfront', 'view',	'grade','sqft_above', 'sqft_basement',
    'zipcode', 'lat',	'long', 'sqft_living15', 'sqft_lot15']]
imot.head()

"""###<b>1.4 Удалите признаки date, zipcode, lat, long"""

imot.drop(columns=['date', 'zipcode', 'lat', 'long'], inplace=True)
imot.head()

"""###<b>Условие 2: 2 задача

Создайте датафрейм с клиентами:
clients = pd.DataFrame({
'client_id': [1459, 4684, 3498, 3942, 4535, 2308, 2866, 2765, 1472, 4236, 2295,
939, 3840, 280, 20, 4332, 3475, 4213, 3113, 4809, 2134, 2242,
2068, 4929, 1384, 1589, 3317, 2260, 1727, 1764, 1611, 1474],
'house_id': [8965450190, 6823100225, 5104540330, 2131701075, 1522700060,
1189000207, 6821600300, 7137950720, 9510920050, 6131600255,
5428000070, 1788800910, 8100400160, 3123049142, 6306800010,
5083000375, 7920100025, 1951600150, 809001400, 339600110,
1622049154, 1099600250, 8563000110, 2768100205, 3995700435,
8861700030, 3303980210, 7731100066, 8146100580, 825069097,
3889100029, 9524100196]
})
"""

clients = pd.DataFrame({ 'client_id': [1459, 4684, 3498, 3942, 4535, 2308, 2866, 2765, 1472, 4236, 2295, 939,
                                   3840, 280, 20, 4332, 3475, 4213, 3113, 4809, 2134, 2242, 2068, 4929, 1384,
                                   1589, 3317, 2260, 1727, 1764, 1611, 1474],
                     'house_id': [8965450190, 6823100225,5104540330, 2131701075, 1522700060, 1189000207, 6821600300, 
                                  7137950720, 9510920050, 6131600255, 5428000070, 1788800910, 8100400160, 3123049142,
                                  6306800010, 5083000375, 7920100025, 1951600150, 809001400, 339600110, 1622049154,
                                  1099600250, 8563000110, 2768100205, 3995700435, 8861700030, 3303980210, 7731100066,
                                  8146100580, 825069097, 3889100029, 9524100196]})
clients.sample(10)

"""###<b> 2.1 Присоедините к таблице clients данные по домам через метод join"""

clients = clients.set_index('house_id')

imot_join=clients.join(imot)
imot_join.sample(5)

"""### 2.2 Присоедините к таблице clients данные по домам через метод merge
Это нужно, чтобы понимать, какие дома покупались клиентами
house_id - это индексы датафрейма с домами
"""

imot_merge=clients.merge(imot,left_on ='house_id', right_on = 'id', how = 'left')
imot_merge.sample(5)

"""###<b>.Условие 3: 3 задача
Составьте несколько сводных таблиц  
3.1 Найдите среднюю стоимость домов в зависимости от количества спален
Отсортируйте от меньшей стоимости к большей  
3.2 Найдите минимальную, среднюю и максимальную стоимости домов в зависимости от состояния дома  
3.3 Постройте таблицу с подсчетом количества домов в данных в зависимости от вида на набережную и оценкой вида  
3.4 Каких домов в зависимости от этажности и количества спален больше?  
3.5 Постройте таблицу с подсчетом медианной стоимости домов в данных в зависимости от состояния дома и оценки дома  
"""

imot.groupby('bedrooms').agg({'price': 'mean'}).round (2). sort_values('price', ascending = True)

"""###<b> 3.2 Найдите минимальную, среднюю и максимальную стоимости домов в зависимости от состояния дома"""

imot.groupby('condition').agg({'price': ['mean','max','min'] }).round (2)

"""###<b>.3.3 Постройте таблицу с подсчетом количества домов в данных в зависимости от вида на набережную и оценкой вида"""

imot.pivot_table(index='waterfront',
                 columns='view',
                   values='price',
                   aggfunc='count',
                   fill_value=0)

"""###<b>3.4 Каких домов в зависимости от этажности и количества спален больше?"""

pd.crosstab(index=imot['floors'],
            columns=imot['bedrooms'])

"""###<b>3.5 Постройте таблицу с подсчетом медианной стоимости домов в данных в зависимости от состояния дома и оценки дома"""

pd.crosstab(index=imot['condition'],
            columns=imot['grade'],
            values= imot['price'],
            aggfunc= 'median').round(2)

"""# <b>Урок 4. Визуальный анализ данных
Условие 1: Задача 1  
Постройте график  
Назовите график  
Сделайте именование оси x и оси y  
Сделайте выводы  

1.1. Скачать данные по ссылке https://www.kaggle.com/datasets/ionaskel/laptop-prices  
1.2 Изучите стоимости недвижимости  
1.3 Изучите распределение квадратуры жилой  
2.1.4 Изучите распределение года постройки  
"""

import numpy as np
# pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(8, 6))
plt.plot([0, 1, 2, 3], [10, 9, 6, 1])
plt.xlabel('x' )
plt.ylabel('y')
plt.title('KC_HOUCE')
plt.grid()

d = imot.groupby('yr_built')['price'].agg(count='count').reset_index().sort_values(by='yr_built')
d.head()

plt.figure (figsize=(8,6))
plt.plot(d['yr_built'], d['count'])
plt.title ('HOUCE')
plt.xlabel('Год постройки')
plt.ylabel('Количество предложений')
plt.grid();

plt.figure(figsize=(8, 6))

plt.hist(imot['yr_built'], bins=25)

plt.title('HOUCE')
plt.xlabel('Год постройки')
plt.ylabel('Количество предложений')

d = imot.groupby('price')['bedrooms'].agg(count='count').reset_index()
# d = imot.groupby('price').agg(count='count').reset_index()
d.sample(15)

plt.figure (figsize=(8,6))
plt.plot(d['price']/1000, d['count'])
plt.title ('HOUCE')
plt.xlabel('Цена')
plt.ylabel('Количество предложений')
plt.grid();

plt.figure(figsize=(6, 4))

plt.hist(d['price']/10000, bins=25)

plt.title('HOUCE')
plt.xlabel('Цена')
plt.ylabel('Количество предложений')

plt.figure(figsize=(6, 4))

plt.hist(imot['yr_built'], bins=25)

plt.title('HOUSE')
plt.xlabel('yr_build')
plt.ylabel('Количество предложений')

plt.figure(figsize=(6, 4))

plt.hist(imot['sqft_living'], bins=25)

plt.title('HOUSE')
plt.xlabel('sqft_living')
plt.ylabel('Количество предложений');

data = imot['floors'].value_counts()

plt.figure(figsize=(6, 4))
plt.pie(data, autopct='%1.1f%%', labels=data.index)
plt.title('Количество этажей');

"""# Новый раздел

Скатерплот Будем смотреть ЗАвисимость Цены от количества спален
"""

plt.scatter(imot.price,imot.bedrooms);

"""На графике выше мы видим, что стоимость недвижимости зависит от к-ва спален, что логично и самые большие продажи сосредоточены на домах с 1 - 2-мя спальнями, как и средняя цена. Но также можно заметить интересную деталь, что дом с 7-мю спальнями был продан по  средней цене дома с 1-2 спальнями, что наверное дешево

Скатерплот Будем смотреть ЗАвисимость Цены от размеров жилой площади
"""

plt.scatter(imot.price,imot.sqft_living)
plt.grid();

"""Скатерплот Будем смотреть ЗАвисимость Цены от этажности"""

plt.scatter(imot.price,imot.floors);

"""На данном графике видно, что более всего продаваемы 2-х этажные дома И стоимость у них???"""

imot['bedrooms'].min(),imot['bedrooms'].max(),imot['bedrooms'].mean()

import pandas as pd
imot = pd.read_csv('/content/sample_data/kc-house-data (1).csv', encoding='cp1251', index_col='id')
plt.figure(figsize=(6, 4));

d=imot['bedrooms'].sort_values()
d.sample(15)

# d=imot.groupby('price')['bedrooms'].sum().reset_index().sort_values(by='bedrooms') 
# d.sample(10)

"""###<b> Условие 2: 2 задача  
2.1 Изучите распределение домов от наличия вида на набережную  
Постройте график  
Сделайте выводы
"""

data = imot['waterfront'].value_counts()

plt.figure(figsize=(8, 6))
plt.pie(data, autopct='%1.1f%%', labels=data.index)
plt.title('Вид на набережную');

"""Из графика видно, что предложений домов с видом на набережную почти нет, ну потом-что меньше 1%, очевидно, что и цена на такие дома долна быть высокой, что сейчас и проверим на скатерплоте

"""

plt.scatter(imot.price,imot.waterfront);

"""### <b>2.2 Изучите распределение этажей домов"""

data = imot['floors'].value_counts()

plt.figure(figsize=(8, 6))
plt.pie(data, autopct='%1.1f%%', colors =('green','blue', 'yellow', 'orange', 'violet','red'),explode = (0.0,0.0,0.0,0.0,0.4,0.0), labels=data.index)
# colors =('green','blue', 'yeloow', 'orange', 'violet','red')
plt.title('Этажность');

"""Как то так :))

###<b>2.2 Изучите распределение состояния домов
"""

data = imot['condition'].value_counts()

plt.figure(figsize=(8, 6))
plt.pie(data, autopct='%1.1f%%', colors =('green','blue', 'yellow', 'orange', 'violet'),
 explode = (0.0,0.0,0.0,0.0,0.4), labels=data.index)
plt.title('Этажность');

"""###<b>Условие 3: 3 задача
Исследуйте, какие характеристики недвижимости влияют на стоимость недвижимости, с применением не менее 5 диаграмм из урока.
Анализ сделайте в формате storytelling: дополнить каждый график письменными выводами и наблюдениями.

1. Исследуем площадь.
"""

plt.figure(figsize=(8, 6))
plt.hist(imot['sqft_living'])
plt.title('Распределение площади ')
plt.xlabel('price')
plt.ylabel('sqft_living');

counts = imot['sqft_living'].value_counts()
    
plt.figure(figsize=(12, 10))    
plt.title('Распределение площади')
sns.barplot(x=counts.index, y=counts.values)
    
plt.show()

"""НЕ ГОДИТСЯ((  
  Тогда так:
"""

plt.scatter(imot.price,imot.sqft_living)
plt.xlabel('sqft_living')
plt.ylabel('price')
plt.title('Распределение площади');

"""Конечно же размер площади влияет на стоимость недвижимости и на графике мы видим, что большим предложением пользуются дома с небольшой площадью"""

imot.info()

"""Исследуем цену и количество спален"""

sns.jointplot(x=imot['bedrooms'], y=imot['price'], kind='reg');

"""2.цена и оценка"""

sns.jointplot(x=imot['grade'], y=imot['price'], kind='reg');

"""Здесь четкая зависимость: т.е. чем выше оценка, тем выше цена

3.Зависимость
"""

counts = imot_join['bathrooms'].value_counts()
    
plt.figure(figsize=(8, 6))    
plt.title('Ванные комнаты')
sns.barplot(x=counts.index, y=counts.values)
    
plt.show()

"""А теперь Корреляция"""

corr_matrix = imot.corr()
corr_matrix = np.round(corr_matrix, 1)
corr_matrix[np.abs(corr_matrix) < 0.3] = 0
corr_matrix

plt.figure(figsize=(10, 8))

sns.set(font_scale=1.4)

sns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')

plt.title('Correlation matrix');

"""#<b> И наконец - ГЕО ДАННЫЕ"""

min_long = -124.55
max_long = -113.80

min_lat = 32.45
max_lat = 42.05

import matplotlib.image as img

washington_map = img.imread('/content/sample_data/Washington_Map.png.png')

plt.figure(figsize=(12, 9))
plt.imshow(washington_map,
           extent=[min_long, max_long, min_lat, max_lat], alpha=0.5,cmap='Greens');

import folium
this_map = folium.Map(prefer_canvas=True)

def plotDot(point):
    folium.CircleMarker(
        location=[point.lat, point.long],
        radius=2,
        popup=point.price
    ).add_to(this_map)
    
imot.apply(plotDot, axis=1)

this_map.fit_bounds(this_map.get_bounds())

this_map